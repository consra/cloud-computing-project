{% comment %}
  404 Redirect Handler
  - Checks for wildcard matches
  - Logs 404 errors
  - Performs redirects
{% endcomment %}

<script>
  const currentPath = window.location.pathname;
  const shopDomain = "{{ shop.domain }}";

  async function handle404() {
    try {
      // Check for redirect
      const response = await fetch(`/apps/redirect/check?path=${encodeURIComponent(currentPath)}`, {
        headers: {
          'X-Shop-Domain': shopDomain,
          'X-Original-Path': currentPath,
          'X-Referrer': document.referrer,
          'X-User-Agent': navigator.userAgent
        }
      });

      const data = await response.json();
      
      if (data.redirect) {
        // Perform redirect if found
        window.location.href = data.redirectUrl;
      } else {
        // Log 404 if no redirect found
        await fetch('/apps/redirect/log', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-Shop-Domain': shopDomain
          },
          body: JSON.stringify({
            path: currentPath,
            userAgent: navigator.userAgent,
            referer: document.referrer
          })
        });
      }
    } catch (error) {
      console.error('Error handling 404:', error);
    }
  }

  // Execute when DOM is ready
  document.addEventListener('DOMContentLoaded', handle404);
</script>

{% schema %}
{
  "name": "404 Page",
  "target": "section",
  "settings": [
    {
      "type": "text",
      "id": "title",
      "label": "404 Title",
      "default": "Page not found"
    },
    {
      "type": "richtext",
      "id": "message",
      "label": "404 Message",
      "default": "<p>The page you were looking for does not exist.</p>"
    }
  ]
}
{% endschema %}

{% if template == '404' %}
  <div class="page-width">
    <div class="empty-page-content text-center">
      <h1>{{ 'general.404.title' | t }}</h1>
      <p>{{ 'general.404.subtext_html' | t }}</p>
    </div>
  </div>
{% endif %} 